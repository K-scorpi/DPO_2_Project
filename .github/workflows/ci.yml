name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'  # Any branch

jobs:
  backend-build:
    runs-on: ubuntu-latest
    name: Build Backend
    if: |
      github.ref == 'refs/heads/main' ||
      contains(github.event.head_commit.modified, 'backend/') ||
      contains(github.event.head_commit.added, 'backend/') ||
      contains(github.event.head_commit.removed, 'backend/') ||
      contains(github.event.head_commit.modified, 'frontend/') ||
      contains(github.event.head_commit.added, 'frontend/') ||
      contains(github.event.head_commit.removed, 'frontend/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install Poetry
      run: |
        pip install poetry

    - name: Install dependencies
      working-directory: ./backend
      run: |
        poetry config virtualenvs.create false
        poetry install --no-interaction --no-ansi --no-root

    - name: Build backend Docker image
      run: |
        docker build -t backend:latest -f ./backend/Dockerfile ./backend

  frontend-build:
    runs-on: ubuntu-latest
    name: Build Frontend
    if: |
      github.ref == 'refs/heads/main' ||
      contains(github.event.head_commit.modified, 'frontend/') ||
      contains(github.event.head_commit.added, 'frontend/') ||
      contains(github.event.head_commit.removed, 'frontend/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Create .env.production
      run: |
        echo "REACT_APP_API_URL=http://88.218.67.17:8001" > frontend/.env.production

    - name: Disable CI env for build
      run: unset CI

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: CI='' npm run build

    - name: Build frontend Docker image
      run: |
        docker build -t frontend:latest -f ./frontend/Dockerfile ./frontend

  local-deploy:
    needs: [backend-build, frontend-build]
    runs-on: ubuntu-latest
    name: Deploy and Test Locally

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Run Docker Compose
      run: |
        docker-compose up -d

    - name: Wait for services to be ready
      run: |
        sleep 30  # Give services time to start

  deploy-to-server:
    needs: local-deploy
    runs-on: ubuntu-latest
    name: Deploy to Production Server
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -p 2224 -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        # SSH into server and deploy
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -v -p 2224 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          # Create app directory if it doesn't exist
          mkdir -p ~/app
          cd ~/app
          
          # Initialize git repository if it doesn't exist
          if [ ! -d .git ]; then
            git init
            git remote add origin https://github.com/K-scorpi/DPO_2_Project.git
          fi
          
          # Pull latest changes
          git fetch origin
          git reset --hard origin/main
          
          # Build and deploy
          cd backend
          docker build -t backend:latest .
          cd ../frontend
          docker build -t frontend:latest .
          cd ..
          
          # Start services
          docker-compose up -d --build
        '