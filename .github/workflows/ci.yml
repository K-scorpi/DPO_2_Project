name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'  # Any branch

jobs:
  backend-build:
    runs-on: ubuntu-latest
    name: Build Backend
    if: |
      github.ref == 'refs/heads/main' ||
      contains(github.event.head_commit.modified, 'backend/') ||
      contains(github.event.head_commit.added, 'backend/') ||
      contains(github.event.head_commit.removed, 'backend/') ||
      contains(github.event.head_commit.modified, 'frontend/') ||
      contains(github.event.head_commit.added, 'frontend/') ||
      contains(github.event.head_commit.removed, 'frontend/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install Poetry
      run: |
        pip install poetry

    - name: Install dependencies
      working-directory: ./backend
      run: |
        poetry config virtualenvs.create false
        poetry install --no-interaction --no-ansi --no-root

    - name: Build backend Docker image
      run: |
        docker build -t backend:latest -f ./backend/Dockerfile ./backend
        docker save backend:latest > backend.tar

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -p 2224 -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Transfer backend image to server
      if: github.ref == 'refs/heads/main'
      run: |
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -v -P 2224 -o StrictHostKeyChecking=no backend.tar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/app/

  frontend-build:
    runs-on: ubuntu-latest
    name: Build Frontend
    if: |
      github.ref == 'refs/heads/main' ||
      contains(github.event.head_commit.modified, 'frontend/') ||
      contains(github.event.head_commit.added, 'frontend/') ||
      contains(github.event.head_commit.removed, 'frontend/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Disable CI env for build
      run: unset CI

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Build frontend Docker image
      run: |
        docker build -t frontend:latest -f ./frontend/Dockerfile ./frontend
        docker save frontend:latest > frontend.tar

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -p 2224 -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Transfer frontend image to server
      if: github.ref == 'refs/heads/main'
      run: |
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -v -P 2224 -o StrictHostKeyChecking=no frontend.tar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/app/

  local-deploy:
    needs: [backend-build, frontend-build]
    runs-on: ubuntu-latest
    name: Deploy and Test Locally

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Run Docker Compose
      run: |
        docker-compose up -d

    - name: Wait for services to be ready
      run: |
        sleep 30  # Give services time to start

  deploy-to-server:
    needs: local-deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Deploy to Production Server

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -p 2224 -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        # Create necessary directories on server
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -v -p 2224 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          mkdir -p ~/app/backend
          mkdir -p ~/app/frontend
        '

        # Copy docker-compose.yml to server
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -v -P 2224 -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/app/
        
        # Copy backend and frontend directories
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -v -P 2224 -o StrictHostKeyChecking=no -r ./backend/* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/app/backend/
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -v -P 2224 -o StrictHostKeyChecking=no -r ./frontend/* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/app/frontend/
        
        # SSH into server and deploy
        sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -v -p 2224 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          cd ~/app
          docker load < backend.tar
          docker load < frontend.tar
          docker-compose up -d
        '